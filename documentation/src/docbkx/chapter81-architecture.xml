<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.oasis-open.org/docbook/4.5" xmlns:xl="http://www.w3.org/1999/xlink"
	xsi:schemaLocation="http://www.oasis-open.org/docbook/4.5 http://www.oasis-open.org/docbook/xsd/4.5/docbook.xsd">

	<title>Architecture</title>

	<chapterinfo>
		<abstract>
			<para>
				The architecture of DataCleaner can be described from different
				angles depending on the topic of interest. In the following sections
				we cover different aspects of the DataCleaner architecture.
			</para>
		</abstract>
	</chapterinfo>

	<section id="architecture_data_access">
		<title>Data access</title>

		<para>In DataCleaner all sources of data are called 'datastores'. This
			concept covers both sources that are read/parsed locally and those
			that are 'connected to', eg. databases and applications. Some
			datastores can also be written to, for instance relational databases.
		</para>

		<para>
			DataCleaner uses the
			<link xl:href="http://metamodel.incubator.apache.org">Apache MetaModel framework</link>
			for data access. From DataCleaner's perspective, MetaModel provides a
			number of features:
		</para>
		<orderedlist>
			<listitem>
				<para>A common way of interacting with different datastores.</para>
			</listitem>
			<listitem>
				<para>A programmatic query syntax that abstracts away
					database-specific SQL dialects, and that is usable also for non-SQL
					oriented datastores (files etc.).
				</para>
			</listitem>
			<listitem>
				<para>Out-of-the-box connectivity to a lot of sources, eg. CSV
					files, relational databases, Excel spreadsheets and a lot more.
				</para>
			</listitem>
			<listitem>
				<para>A framework for modelling new sources using the same common
					model.
				</para>
			</listitem>
		</orderedlist>

		<para>
			DataCleaners datastore model is also extensible in the way that
			you
			can yourself implement new datastores in order to hook up
			DataCleaner
			to legacy systems, application interfaces and more. For more
			information refer to the
			<link linkend="section_development_tutorials">Developer resources</link>
			chapter.
		</para>

	</section>
	<section id="architecture_processing_framework">
		<title>Processing framework</title>

		<para>
			For processing data, DataCleaner builds upon the
			<link xl:href="http://analyzerbeans.eobjects.org">AnalyzerBeans framework</link>
			framework, which is a closely related, but independent project. The
			goal of AnalyzerBeans is to provide a performant and extensible
			framework for batch-analyzing data.
		</para>

		<para>
			AnalyzerBeans is different from most conventional data processing
			frameworks in that you do not specify a specific order of events, but
			the framework
			<emphasis>infers</emphasis>
			it. If a step (aka. a component) in the flow requires input from
			another step, then the flow is automatically layed out so that the
			dependent step is executed before the other. Please refer to the
			section on
			<link linkend="wiring_components">wiring components together</link>
			for an walkthrough on how this works in practice.
		</para>

		<para>
			One of the key characteristics of AnalyzerBeans is that it is
			built
			for massively parallel processing. Whereas most data processing
			frameworks archieve parallelism by the use of parallel execution of
			<emphasis>each step</emphasis>
			in a flow, the AnalyzerBeans framework
			executes the processing of
			<emphasis>each record</emphasis>
			in parallel. This means that any CPU utilization is drastically
			improved since unequal processing time of the steps in a processing
			chain does not cause in bottlenecks! The downside to this approach is
			that the order of the processed records cannot be guaranteed, but
			this is only very rarely required in the domain of data profiling and
			analysis, and if it is required there are technical workarounds to
			apply.
		</para>

		<para>
			To further optimize performance, the AnalyzerBeans framework
			also
			allows certain components to modify the source query of the
			processing chain! This is a mechanism known as "push down query
			optimization", and is only applicable in scenarios where all
			succeeding components depend on a specific condition. But in those
			cases (for instance a filter specifying that a field is NOT NULL),
			then it can drastically improve the time needed to process all
			records. For more information on this principle, please read the blog
			entry '
			<link
				xl:href="http://kasper.eobjects.org/2011/12/push-down-query-optimization-in.html">Push down query optimization in DataCleaner</link>
			' by Kasper SÃ¸rensen.
		</para>

	</section>

</chapter>
